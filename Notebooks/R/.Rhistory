W <-array(0, c(K,K))
W[distance==1] <-1
#### Generate the covariates and response data
x1 <- rnorm(K)
x2 <- rnorm(K)
theta <- rnorm(K, sd=0.05)
phi <- mvrnorm(n=1, mu=rep(0,K), Sigma=0.4 * exp(-0.1 * distance))
logit <- x1 + x2 + theta + phi
prob <- exp(logit) / (1 + exp(logit))
trials <- rep(50,K)
Y <- rbinom(n=K, size=trials, prob=prob)
#### Run the BYM model
formula <- Y ~ x1 + x2
## Not run: model <- S.CARbym(formula=formula, family="binomial", trials=trials,
#W=W, burnin=20000, n.sample=100000)
## End(Not run)
#### Toy example for checking
model <- S.CARbym(formula=formula, family="binomial", trials=trials,
W=W, burnin=20, n.sample=50)
model
library(glmmTMB)
# fitst we need to create a numeric factor recording the coordinates of the sampled locations
dat$pos <- numFactor(scale(dat$x), scale(dat$y))
# load libraries
library(tidyverse)
library(gridExtra)
library(NLMR)
library(DHARMa)
# simulate a random temperature gradient
temp <- nlm_distancegradient(ncol = 100, nrow = 100, origin = c(1,10,1,10), rescale = TRUE)
# extract the temperature values at 100 random points
dat <- data.frame(x = runif(100,0,100), y = runif(100,0,100))
dat$temperature <- raster::extract(temp, dat)
# simulate tree height
dat$height <- 20 + 35 * dat$temperature + rnorm(100)
# plot spatial pattern in tree height
ggplot(dat, aes(x = x, y = y, size = height)) +
geom_point() +
scale_size_continuous(range = c(1,10))
library(glmmTMB)
# fitst we need to create a numeric factor recording the coordinates of the sampled locations
dat$pos <- numFactor(scale(dat$x), scale(dat$y))
# then create a dummy group factor to be used as a random term
dat$ID <- factor(rep(1, nrow(dat)))
# fit the model
m_tmb <- glmmTMB(calcium ~ elevation + region + mat(pos + 0 | ID), dat) # take some time to fit
# load libraries
library(tidyverse)
library(gridExtra)
library(NLMR)
library(DHARMa)
library(geoR)
library(viridis
# load libraries
library(tidyverse)
library(gridExtra)
library(NLMR)
library(DHARMa)
library(geoR)
library(viridis)
data(ca20)
# put this in a data frame
dat <- data.frame(x = ca20$coords[,1], y = ca20$coords[,2], calcium = ca20$data, elevation = ca20$covariate[,1], region = factor(ca20$covariate[,2]))
# plot the data
ggplot(dat, aes(x=x, y = y, color =calcium, shape = region)) +
geom_point() +
scale_color_viridis(option = "A")
# load libraries
library(tidyverse)
library(gridExtra)
library(NLMR)
library(DHARMa)
library(geoR)
library(viridis)
library(glmmTMB)
# fitst we need to create a numeric factor recording the coordinates of the sampled locations
dat$pos <- numFactor(scale(dat$x), scale(dat$y))
# then create a dummy group factor to be used as a random term
dat$ID <- factor(rep(1, nrow(dat)))
# fit the model
m_tmb <- glmmTMB(calcium ~ elevation + region + mat(pos + 0 | ID), dat) # take some time to fit
# model summary of fixed effects
summary(m_tmb)
sims <- simulateResiduals(m_tmb)
plot(sims)
# fit a non-spatial model
m_non <- lm(calcium ~ elevation, dat)
# fit a non-spatial model
m_non <- lm(calcium ~ elevation, dat)
# plot residuals
dat$resid <- resid(m_non)
# dat$resid_std <- rescale(dat$resid, 1, 10)
ggplot(dat, aes(x = x, y = y, size = resid)) +
geom_point() +
scale_size_continuous(range = c(1,10))
# formal test
sims <- simulateResiduals(m_non)
testSpatialAutocorrelation(sims, x = dat$x, y = dat$y, plot = FALSE)
library(geoR)
library(ggplot2)
library(tidyverse)
library(INLA)
# the ca20 dataset
# load the example dataset,
# calcium content in soil samples in Brazil
data(ca20)
# put this in a data frame
dat <- data.frame(x = ca20$coords[,1],y = ca20$coords[,2],calcium = ca20$data,
elevation = ca20$covariate[,1],
region = factor(ca20$covariate[,2]))
library(sf)
f <- file.path("https://www.paulamoraga.com/book-spatial/", "data/PM25USA2022.csv")
d <- read.csv(f)
d <- st_as_sf(d, coords = c("longitude", "latitude"))
st_crs(d) <- "EPSG:4326"
library(sf)
f <- file.path("https://www.paulamoraga.com/book-spatial/", "data/PM25USA2022.csv")
d <- read.csv(f)
d <- st_as_sf(d, coords = c("longitude", "latitude"))
st_crs(d) <- "EPSG:4326"
library(rnaturalearth)
install.packages("rnaturalearth")
library(sf)
library(rnaturalearth)
map <- ne_countries(type = "countries",
country = "United States of America",
scale = "medium", returnclass = "sf")
install.packages("rnaturalearthdata")
map <- ne_countries(type = "countries",
country = "United States of America",
scale = "medium", returnclass = "sf")
map <- st_crop(map, xmin = -130, xmax = -60, ymin = 18, ymax = 72)
d <- st_filter(d, map)
nrow(d)
library(ggplot2)
library(viridis)
ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = value)) +
scale_color_viridis()
library(sf)
library(rnaturalearth)
library(sf)
library(terra)
# raster grid covering map
grid <- terra::rast(map, nrows = 100, ncols = 100)
# coordinates of all cells
xy <- terra::xyFromCell(grid, 1:ncell(grid))
# transform points to a sf object
dp <- st_as_sf(as.data.frame(xy), coords = c("x", "y"),
crs = st_crs(map))
# indices points within the map
indicespointswithin <- which(st_intersects(dp, map,
sparse = FALSE))
# points within the map
dp <- st_filter(dp, map)
# plot
ggplot() + geom_sf(data = map) +
geom_sf(data = dp)
library(sf)
library(rnaturalearth)
library(sf)
library(terra)
library(geodata)
covtemp <- worldclim_global(var = "tavg", res = 10,
path = tempdir())
install.packages("geodata")
covtemp <- worldclim_global(var = "tavg", res = 10,
path = tempdir())
library(sf)
library(rnaturalearth)
library(sf)
library(terra)
library(geodata)
covtemp <- worldclim_global(var = "tavg", res = 10,
path = tempdir())
covprec <- worldclim_global(var = "prec", res = 10,
path = tempdir())
# Extract at observed locations
d$covtemp <- extract(mean(covtemp), st_coordinates(d))[, 1]
d$covprec <- extract(mean(covprec), st_coordinates(d))[, 1]
# Extract at prediction locations
dp$covtemp <- extract(mean(covtemp), st_coordinates(dp))[, 1]
dp$covprec <- extract(mean(covprec), st_coordinates(dp))[, 1]
library("patchwork")
p1 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covtemp)) +
scale_color_viridis()
p2 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covprec)) +
scale_color_viridis()
p1 / p2
library("patchwork")
p1 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covtemp)) +
scale_color_viridis()
p2 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covprec)) +
scale_color_viridis()
library("patchwork")
p1 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covtemp)) +
scale_color_viridis()
p2 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covprec)) +
scale_color_viridis()
p1,p2
library("patchwork")
p1 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covtemp)) +
scale_color_viridis()
p2 <- ggplot() + geom_sf(data = map) +
geom_sf(data = d, aes(col = covprec)) +
scale_color_viridis()
p1/p2
st_crs("EPSG:3857")$proj4string
projMercator<-"+proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0
+x_0=0 +y_0=0 +k=1 +units=km +nadgrids=@null +wktext +no_defs"
d <- st_transform(d, crs = projMercator)
dp <- st_transform(dp, crs = projMercator)
# Observed coordinates
coo <- st_coordinates(d)
# Predicted coordinates
coop <- st_coordinates(dp)
library(sf)
library(rnaturalearth)
library(sf)
library(terra)
library(geodata)
library(INLA)
summary(dist(coo)) # summary of distances between locations
mesh <- inla.mesh.2d(loc = coo, max.edge = c(200, 500),
cutoff = 1)
mesh$n
plot(mesh)
points(coo, col = "red")
axis(1)
axis(2)
spde <- inla.spde2.matern(mesh = mesh, alpha = 2, constr = TRUE)
indexs <- inla.spde.make.index("s", spde$n.spde)
lengths(indexs)
A <- inla.spde.make.A(mesh = mesh, loc = coo)
# dimension of the projection matrix
dim(A)
Ap <- inla.spde.make.A(mesh = mesh, loc = coop)
# stack for estimation stk.e
stk.e <- inla.stack(tag = "est",
data = list(y = d$value), A = list(1, A),
effects = list(data.frame(b0 = rep(1, nrow(A)),
covtemp = d$covtemp, covprec = d$covprec),
s = indexs))
# stack for prediction stk.p
stk.p <- inla.stack(tag = "pred",
data = list(y = NA), A = list(1, Ap),
effects = list(data.frame(b0 = rep(1, nrow(Ap)),
covtemp = dp$covtemp, covprec = dp$covprec),
s = indexs))
# stk.full has stk.e and stk.p
stk.full <- inla.stack(stk.e, stk.p)
formula <- y ~ 0 + b0 + covtemp + covprec + f(s, model = spde)
res <- inla(formula, family = "gaussian",
data = inla.stack.data(stk.full),
control.predictor = list(compute = TRUE,
A = inla.stack.A(stk.full)),
control.compute = list(return.marginals.predictor = TRUE))
res$summary.fixed
index <- inla.stack.index(stack = stk.full, tag = "pred")$data
pred_mean <- res$summary.fitted.values[index, "mean"]
pred_ll <- res$summary.fitted.values[index, "0.025quant"]
pred_ul <- res$summary.fitted.values[index, "0.975quant"]
grid$mean <- NA
grid$ll <- NA
grid$ul <- NA
grid$mean[indicespointswithin] <- pred_mean
grid$ll[indicespointswithin] <- pred_ll
grid$ul[indicespointswithin] <- pred_ul
summary(grid) # negative values for the lower limit
library(rasterVis)
levelplot(grid, layout = c(1, 3),
names.attr = c("Mean", "2.5 percentile", "97.5 percentile"))
excprob <- sapply(res$marginals.fitted.values[index],
FUN = function(marg){1-inla.pmarginal(q = 10, marginal = marg)})
grid$excprob <- NA
grid$excprob[indicespointswithin] <- excprob
levelplot(grid$excprob, margin = FALSE)
library("sf")
library("spocc")
install.packages("spocc")
df <- occ(query = "solanum", from = "gbif",
date = c("2015-01-01", "2022-12-31"),
gbifopts = list(country = "BO"),
has_coords = TRUE, limit = 1000)
library("sf")
library("spocc")
df <- occ(query = "solanum", from = "gbif",
date = c("2015-01-01", "2022-12-31"),
gbifopts = list(country = "BO"),
has_coords = TRUE, limit = 1000)
d <- occ2df(df)
d <- st_as_sf(d[, 2:3], coords = c("longitude", "latitude"))
st_crs(d) <- "EPSG:4326"
st_crs("EPSG:5356")$proj4string
projUTM <- "+proj=utm +zone=19 +south +ellps=GRS80
+towgs84=0,0,0,0,0,0,0 +units=km +no_defs"
d <- st_transform(d, crs = projUTM)
library(rnaturalearth)
map <- ne_countries(type = "countries", country = "Bolivia",
scale = "medium", returnclass = "sf")
map <- st_transform(map, crs = projUTM)
library("ggplot2")
ggplot() + geom_sf(data = map) +
geom_sf(data = d) + coord_sf(datum = projUTM)
coo <- st_coordinates(d)
library(sf)
library(terra)
# raster grid covering map
grid <- terra::rast(map, nrows = 100, ncols = 100)
# coordinates of all cells
xy <- terra::xyFromCell(grid, 1:ncell(grid))
ggplot() + geom_sf(data = map) +
geom_sf(data = dp) + coord_sf(datum = projUTM)
coop <- st_coordinates(dp)
df <- occ(query = "solanum", from = "gbif",
date = c("2015-01-01", "2022-12-31"),
gbifopts = list(country = "BO"),
has_coords = TRUE, limit = 1000)
d <- occ2df(df)
d <- st_as_sf(d[, 2:3], coords = c("longitude", "latitude"))
st_crs(d) <- "EPSG:4326"
st_crs("EPSG:5356")$proj4string
projUTM <- "+proj=utm +zone=19 +south +ellps=GRS80
+towgs84=0,0,0,0,0,0,0 +units=km +no_defs"
d <- st_transform(d, crs = projUTM)
library(rnaturalearth)
map <- ne_countries(type = "countries", country = "Bolivia",
scale = "medium", returnclass = "sf")
map <- st_transform(map, crs = projUTM)
map <- ne_countries(type = "countries", country = "Bolivia",
scale = "medium", returnclass = "sf")
map <- st_transform(map, crs = projUTM)
ggplot() + geom_sf(data = map) +
geom_sf(data = d) + coord_sf(datum = projUTM)
coo <- st_coordinates(d)
# raster grid covering map
grid <- terra::rast(map, nrows = 100, ncols = 100)
# coordinates of all cells
xy <- terra::xyFromCell(grid, 1:ncell(grid))
# transform points to a sf object
dp <- st_as_sf(as.data.frame(xy), coords = c("x", "y"),
crs = st_crs(map))
# indices points within the map
indicespointswithin <- which(st_intersects(dp, map,
sparse = FALSE))
# points within the map
dp <- st_filter(dp, map)
ggplot() + geom_sf(data = map) +
geom_sf(data = dp) + coord_sf(datum = projUTM)
coop <- st_coordinates(dp)
library(INLA)
summary(dist(coo)) # summary of distances between event locations
loc.d <- cbind(st_coordinates(map)[, 1], st_coordinates(map)[, 2])
mesh <- inla.mesh.2d(loc.domain = loc.d, max.edge = c(50, 100),
offset = c(50, 100), cutoff = 1)
loc.d <- cbind(st_coordinates(map)[, 1], st_coordinates(map)[, 2])
mesh <- inla.mesh.2d(loc.domain = loc.d, max.edge = c(50, 100), offset = c(50, 100), cutoff = 1)
plot(mesh)
points(coo, col = "red")
axis(1)
axis(2)
(nv <- mesh$n)
dmesh <- book.mesh.dual(mesh)
book.mesh.dual <- function(mesh) {
if (mesh$manifold=='R2') {
ce <- t(sapply(1:nrow(mesh$graph$tv), function(i)
colMeans(mesh$loc[mesh$graph$tv[i, ], 1:2])))
library(parallel)
pls <- mclapply(1:mesh$n, function(i) {
p <- unique(Reduce('rbind', lapply(1:3, function(k) {
j <- which(mesh$graph$tv[,k]==i)
if (length(j)>0)
return(rbind(ce[j, , drop=FALSE],
cbind(mesh$loc[mesh$graph$tv[j, k], 1] +
mesh$loc[mesh$graph$tv[j, c(2:3,1)[k]], 1],
mesh$loc[mesh$graph$tv[j, k], 2] +
mesh$loc[mesh$graph$tv[j, c(2:3,1)[k]], 2])/2))
else return(ce[j, , drop=FALSE])
})))
j1 <- which(mesh$segm$bnd$idx[,1]==i)
j2 <- which(mesh$segm$bnd$idx[,2]==i)
if ((length(j1)>0) | (length(j2)>0)) {
p <- unique(rbind(mesh$loc[i, 1:2], p,
mesh$loc[mesh$segm$bnd$idx[j1, 1], 1:2]/2 +
mesh$loc[mesh$segm$bnd$idx[j1, 2], 1:2]/2,
mesh$loc[mesh$segm$bnd$idx[j2, 1], 1:2]/2 +
mesh$loc[mesh$segm$bnd$idx[j2, 2], 1:2]/2))
yy <- p[,2]-mean(p[,2])/2-mesh$loc[i, 2]/2
xx <- p[,1]-mean(p[,1])/2-mesh$loc[i, 1]/2
}
else {
yy <- p[,2]-mesh$loc[i, 2]
xx <- p[,1]-mesh$loc[i, 1]
}
Polygon(p[order(atan2(yy,xx)), ])
})
return(SpatialPolygons(lapply(1:mesh$n, function(i)
Polygons(list(pls[[i]]), i))))
}
else stop("It only works for R2!")
}
dmesh <- book.mesh.dual(mesh)
plot(dmesh)
axis(1)
axis(2)
# Domain polygon is converted into a SpatialPolygons
domain.polys <- Polygons(list(Polygon(loc.d)), '0')
domainSP <- SpatialPolygons(list(domain.polys))
# Because the mesh is larger than the study area, we need to
# compute the intersection between each polygon
# in the dual mesh and the study area
library(rgeos)
install.packages("rgeos")
devtools::install_github("cran/alphahull")
devtools::install_github("cran/rgeos")
# Domain polygon is converted into a SpatialPolygons
domain.polys <- Polygons(list(Polygon(loc.d)), '0')
domainSP <- SpatialPolygons(list(domain.polys))
# Because the mesh is larger than the study area, we need to
# compute the intersection between each polygon
# in the dual mesh and the study area
library(rgeos)
w <- sapply(1:length(dmesh), function(i) {
if (gIntersects(dmesh[i, ], domainSP))
return(gArea(gIntersection(dmesh[i, ], domainSP)))
else return(0)
})
sum(w) # sum weights
st_area(map) # area of the study region
plot(mesh)
points(mesh$loc[which(w > 0), 1:2], col = "black", pch = 20)
points(mesh$loc[which(w == 0), 1:2], col = "red", pch = 20)
y.pp <- rep(0:1, c(nv, n))
head(cbind(y.pp, e.pp))
y.pp <- rep(0:1, c(nv, n))
tail(cbind(y.pp, e.pp))
n
nv
w
y.pp <- rep(0:1, c(nv, n))
y.pp <- as.numeric(rep(0:1, c(nv, n)))
y.pp <- rep(0:1, c(nv, as.numeric(n)))
y.pp <- rep(0:1, c(as.numeric(nv), n))
y.pp <- rep(0:1, c(nv, n))
y.pp <- rep(0:1, as.numeric(c(nv, n)))
y.pp <- rep(0:1, unlist((c(nv, n))))
y.pp <- unlist(rep(0:1, (c(nv, n))))
y.pp <- rep(0:1, c(unlist(nv), n))
y.pp <- rep(0:1, unlist(c(nv, n)))
y.pp <- rep(0:1, c(unlist(nv), n))
nv
n
y.pp <- rep(0:1, c(nv, n))
y.pp <- rep(0:1, as.numeric(unlist(c(nv, n))))
class(nv)
class(n)
e.pp <- c(w, rep(0, n))
y.pp <- rep(0:1, c(nv, n))
y.pp <- rep(0.0:1.0, c(nv, n))
(nv <- mesh$n)
(n <- nrow(coo))
spde <- inla.spde2.matern(mesh = mesh, alpha = 2, constr = TRUE)
y.pp <- rep(0:1, c(nv, n))
e.pp <- c(w, rep(0, n))
head(cbind(y.pp, e.pp))
tail(cbind(y.pp, e.pp))
# Projection matrix for the integration points (mesh vertices)
A.int <- Diagonal(nv, rep(1, nv))
# Projection matrix for observed points (event locations)
A.y <- inla.spde.make.A(mesh = mesh, loc = coo)
# Projection matrix for mesh vertices and event locations
A.pp <- rbind(A.int, A.y)
Ap.pp <- inla.spde.make.A(mesh = mesh, loc = coop)
# stack for estimation
stk.e.pp <- inla.stack(tag = "est.pp",
data = list(y = y.pp, e = e.pp),
A = list(1, A.pp),
effects = list(list(b0 = rep(1, nv + n)), list(s = 1:nv)))
# stack for prediction stk.p
stk.p.pp <- inla.stack(tag = "pred.pp",
data = list(y = rep(NA, nrow(coop)), e = rep(0, nrow(coop))),
A = list(1, Ap.pp),
effects = list(data.frame(b0 = rep(1, nrow(coop))),
list(s = 1:nv)))
# stk.full has stk.e and stk.p
stk.full.pp <- inla.stack(stk.e.pp, stk.p.pp)
formula <- y ~ 0 + b0 + f(s, model = spde)
res <- inla(formula,  family = 'poisson',
data = inla.stack.data(stk.full.pp),
control.predictor = list(compute = TRUE, link = 1,
A = inla.stack.A(stk.full.pp)),
E = inla.stack.data(stk.full.pp)$e)
index <- inla.stack.index(stk.full.pp, tag = "pred.pp")$data
pred_mean <- res$summary.fitted.values[index, "mean"]
pred_ll <- res$summary.fitted.values[index, "0.025quant"]
pred_ul <- res$summary.fitted.values[index, "0.975quant"]
grid$mean <- NA
grid$ll <- NA
grid$ul <- NA
grid$mean[indicespointswithin] <- pred_mean
grid$ll[indicespointswithin] <- pred_ll
grid$ul[indicespointswithin] <- pred_ul
library(rasterVis)
levelplot(raster::brick(grid), layout = c(3, 1),
names.attr = c("Mean", "2.5 percentile", "97.5 percentile"))
